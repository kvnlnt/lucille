var Pickl = function(options){

	// DEFAULTS

	    var defaults      = {};
	    defaults.form     = { width:320, height:520 };
	    defaults.config   = this.Config;
	    defaults.theme    = 'zen';
	    defaults.svg      = null;
	    defaults.callback = function(picks){ console.log(picks); };

    // SETTINGS
    
    	_.extend(this, defaults, options);

    // INIT

    	this.themeLoad();
    	this.render();

};;Pickl.prototype.Config = (function(){

	var config = {

		title:'Options',
		fields:{
			remove:{
				type:'button',
				text:'Remove',
				callback:function(){ alert('delete'); }
			},
			order_test:{
				name:'order',
				value:'two',
				enabled:true,
				options:{
					'two':{ name:'two', value:'two' },
					'1':{ name:'1', value:'1' }

				}
			},
			orientation:{
				name:'orientation',
				value:'righty',
				enabled:true,
				callback:null,
				options:{
					righty:{
						name:'righty',
						value:'RIGHTY'
					},
					lefty:{
						name:'lefty',
						value:'LEFTY'
					}
				}
			},
			root:{
				name:'root',
				value:'c_n',
				enabled:true,
				options:{
					c_n:{ name:'C',  value : 'C' },
					c_s:{ name:'C#', value : 'C#' },
					d_f:{ name:'Db', value : 'Db' },
					d_n:{ name:'D',  value : 'D' },
					d_s:{ name:'D#', value : 'D#' },
					e_f:{ name:'Eb', value : 'Eb' },
					e_n:{ name:'E',  value :'E' },
					f_n:{ name:'F',  value :'F' },
					f_s:{ name:'F#', value :'F#' },
					g_b:{ name:'Gb', value :'Gb' },
					g_n:{ name:'G',  value :'G' },
					g_s:{ name:'G#', value :'G#' },
					a_f:{ name:'Ab', value :'Ab' },
					a_n:{ name:'A',  value :'A' },
					a_s:{ name:'A#', value :'A#' },
					b_b:{ name:'Bb', value :'Bb' },
					b_n:{ name:'B',  value :'B' }
				}
			},
			instrument:{
				name:'instrument',
				value:'guitar',
				enabled:true,
				callback:null,
				options:{
					guitar:{
						name:'guitar',
						value:'GUITAR',
						enable:'tuning_guitar',
						disable:'tuning_banjo'
					},
					banjo:{
						name:'banjo',
						value:'BANJO',
						disable:'tuning_guitar',
						enable:'tuning_banjo'
					}
				}
			},
			tuning_guitar:{
				name:'tuning',
				value:'standard',
				enabled:true,
				options:{
					standard:{
						name:'standard',
						value:'EADGBE'
					},
					drop_d:{
						name:'drop d',
						value:'DADGBE'
					}
				}
			},
			tuning_banjo:{
				name:'tuning',
				value:'standard',
				enabled:false,
				options:{
					standard:{
						name:'standard',
						value:'EADG'
					},
					drop_d:{
						name:'drop d',
						value:'DADG'
					}
				}
			}
		}

	};

	return config;

}());;Pickl.prototype.render = function(){

	this.pickl 		      = this.pickl || this.renderForm();
	this.pickl.clear();
	this.pickl.background = this.renderBackground();
	this.pickl.title      = this.renderTitle();
	this.pickl.fields     = this.renderFields();

};

Pickl.prototype.renderForm = function(){

	var form = null === this.svg ? Snap(this.form.width, this.form.height) : this.svg;
	var klass = form.attr('class') + ' pickl';
	form.attr({ 'class':klass, 'transform':'translate('+this.form.width+',0)' });

	return form;

};

Pickl.prototype.renderBackground = function(){

	var background = this.pickl.rect(0,0,this.form.width,this.form.height);
	background.attr({ 'class':'background' });

	return background;

};

Pickl.prototype.renderTitle = function(){

	var title = this.pickl.text(this.form.width/2, 50, this.config.title);
	title.attr({ 'class':'title' });

	return title;

};

Pickl.prototype.renderFields = function(){

	var that   = this;
	var layout = this.calcLayout().fields;
	var fields = this.pickl.g().attr('class','fields');
	var y      = 90;

	_.each(this.config.fields, function(field){

		if(field.enabled){

			var fieldGroup  = fields.g().attr({ 'class':'field button', 'transform':'translate('+layout.x+','+y+')' });
			var fieldTarget = fieldGroup.rect(0,0,layout.width, 40).attr({ 'class':'touchTarget' });
			var fieldTitle  = fieldGroup.text(layout.x + 70,20, field.name).attr({ 'class':'title' });
			var fieldValue  = fieldGroup.text(layout.x + 80, 20, field.options[field.value].name).attr('class','value');		
			y 			   += 41;

			var click = void 0 === field.callback || null === field.callback ? function(){that.displayOptions(field)} : field.callback;
			fieldGroup.click(click,that);

		}

		if(field.type === 'button'){

			var fieldGroup  = fields.g().attr({ 'class':'field button', 'transform':'translate('+layout.x+','+y+')' });
			var fieldTarget = fieldGroup.rect(0,0,layout.width, 40).attr({ 'class':'touchTarget' });
			var fieldTitle  = fieldGroup.text(layout.width/2,20, field.text).attr({ 'class':'text' });
			y 			   += 41;

			fieldGroup.click(field.callback,that);

		}

	});

	var close  = this.pickl.g().attr({'class':'button close', 'transform':'translate('+layout.x+','+(y+20)+')'});
	var w      = this.form.width * .85;
	var h      = 50;
	var target = close.rect(0,0,w,h).attr({ 'class':'touchTarget' });
	var text   = close.text(layout.width/2, 25, 'done');

	close.click(this.save, this);

	return fields.selectAll('.field');

};

Pickl.prototype.renderOptions = function(field){

	var that          = this;
	var layout        = that.calcLayout().fields;
	var options       = this.pickl.g().attr({ 'class':'options' });
	var background    = options.rect(0,0,that.form.width, that.form.height).attr('class','background');
	var fieldsHeight  = that.form.height-140;
	var isClipping    = (_.size(field.options) * 40) > fieldsHeight;
	var fieldsShowing = Math.floor(fieldsHeight/40);
	var fieldHeight   = isClipping ? fieldsHeight/fieldsShowing : 40;
	var fieldMaskRect = options.rect(layout.x,50,layout.width, fieldsHeight + (fieldsShowing)).attr({'fill':'#FFFFFF'});
	var fieldMask     = options.mask().add(fieldMaskRect).attr({'class':'mask'});
	var fieldWrapper  = options.g().attr({ 'class':'fields', mask:fieldMask });
	var fields        = fieldWrapper.g().data('y',0);
	var selected      = field.options[field.value].value;
	var selectedIndex = 0;
	var y             = 50;
	var x             = layout.x - 1;

	// position options container
	options.attr({ 'transform':'translate('+this.form.width+',0)' });

	// track selected index
	var selectedIndexCounter = 1;

	// option fields
	_.each(field.options, function(option, k){

		var fieldGroup  = fields.g().attr({ 'class':'field button', 'transform':'translate('+x+','+y+')' });
		var fieldTarget = fieldGroup.rect(0,0,layout.width, fieldHeight).attr({ 'class':'touchTarget' });
		var fieldText   = fieldGroup.text(fieldHeight,fieldHeight/2, option.name).attr({ 'class':'value' });
		var klass       = option.value === selected ? 'check selected' : 'check';
		var check       = fieldGroup.g().attr({ 'class':klass});
		var checkTarget = check.rect(0,0,fieldHeight,fieldHeight).attr({ 'class':'touchTarget' });
		var checkMark   = check.text(fieldHeight/4,fieldHeight/2,'\uf00c').attr({ 'class':'value' });

		if(option.value === selected){
			selectedIndex = selectedIndexCounter;
		};

		selectedIndexCounter += 1;
		y += fieldHeight + 1;

		fieldGroup.click(function(){ 
			field.value = k;
			options.animate({ 'transform':'translate('+this.form.width+',0)'}, 200, mina.easeout, function(){ this.remove(); });
			
			// disable fields on click
			_.each(option.disable, function(d){
				that.displayField(d, false);
			});
			
			// enable fields on click
			_.each(option.enable, function(d){
				that.displayField(d, true);
			});

			that.render();
		}, that);

	});

	// add Title
	var titleBG = options.rect(0,0,that.form.width, 50).attr({'class':'background'});
	var title   = options.text(that.form.width/2, 27, field.name).attr('class','title options');


	// generate scrolling
	var scrollBG      = options.rect(0,(fieldsHeight + fieldsShowing + 50),that.form.width,90).attr({'class':'background'});
	var scrollBtnY    = this.form.height - 70;
	var scrollClass   = true === isClipping ? '' : 'hide';
	var down          = options.g().attr({ 'class':'field button scroll ' + scrollClass, 'transform':'translate('+this.form.width/2+','+scrollBtnY+')' });
	var scrolling     = true;
	var downTarget    = down.rect(0,0,layout.width/2-2, fieldHeight).attr({ 'class':'touchTarget' });
	var downText      = down.text(layout.width/4,fieldHeight/2,'\uf078').attr({ 'class':'value' });
	var up            = options.g().attr({ 'class':'field button scroll ' + scrollClass, 'transform':'translate('+layout.x+','+scrollBtnY+')' });
	var upTarget      = up.rect(0,0,layout.width/2-2, fieldHeight).attr({ 'class':'touchTarget' });
	var upText        = up.text(layout.width/4,fieldHeight/2,'\uf077').attr({ 'class':'value' });

	// Scrolling logic
	var scrollDownStart = function(){ scrolling = true; scrollDown(); };
	var scrollStop 		= function(){ scrolling = false; };
	var scrollDown 		= function(){
		var y = fields.data('y') - (fieldHeight + 1);
		var threshold = -(_.size(field.options) - fieldsShowing) * (fieldHeight + 1); // num of fields minus num of fields possible to show time field height
		if(Math.ceil(y) >= threshold){
			fields.animate({'transform':'translate(0,'+y+')'}, 100, mina.easeout, function(){
				if(scrolling) scrollDown();
			});
			fields.data('y',y);
		}

	};

	var scrollUpStart = function(){ scrolling = true; scrollUp(); };
	var scrollUp 	  = function(){
		var y = fields.data('y') + (fieldHeight + 1);
		if(Math.floor(y) <= 0){
			fields.animate({'transform':'translate(0,'+y+')'}, 100, mina.easeout, function(){
				if(scrolling) scrollUp();
			});
			fields.data('y',y);
		}
	};

	down.mousedown(scrollDownStart);
	down.mouseup(scrollStop);
	up.mousedown(scrollUpStart);
	up.mouseup(scrollStop);

	// auto scroll to selected item if it's hidden
	if(selectedIndex > fieldsShowing){
		var y = -(selectedIndex - fieldsShowing) * (fieldHeight + 1);
		fields.attr({'transform':'translate(0,'+y+')'});
		fields.data('y',y);

	}

	return options;


};;Pickl.prototype.calcLayout = function(){

	var layout = {};
	layout.fields = this.calcFields();

	return layout;

};

Pickl.prototype.calcFields = function(){

	var height = 40;
	var width  = this.form.width * .85;
	var x      = this.form.width * .15/2;

	return {
		height:height,
		width:width,
		x:x
	}

};;Pickl.prototype.display = function(){

	this.pickl.animate({ 'transform':'translate(0,0)'}, 200, mina.easein);

};

Pickl.prototype.displayOptions = function(field){

	var options = this.renderOptions(field);
	options.animate({'transform':'translate(0,0)'}, 200, mina.easin);

};

Pickl.prototype.displayField = function(fields, enabled){

	var that = this;
	var fields = "string" === typeof fields ? [fields] : fields;

	_.each(fields,function(field){

		if(void 0 !== that.config.fields[field]) that.config.fields[field].enabled = enabled;

	});

};;Pickl.prototype.save = function(){

	var picks = {};

	_.each(this.config.fields, function(field){
		if(field.enabled) picks[field.name] = field.options[field.value];
	});
	
	this.callback(picks);
	this.pickl.animate({ 'transform':'translate('+this.form.width+',0)'}, 200, mina.easein);

};;Pickl.prototype.themes = (function() {

	var themes                       = {};
	themes.plain                     = {};
	themes.plain.background          = '#e2e2e2';
	themes.plain.fieldset            = '#666666';
	themes.plain.touchTarget         = '#f2f2f2';
	themes.plain.touchTargetOver     = '#000000';
	themes.plain.buttonTextColor     = '#999999';
	themes.plain.buttonTextColorOver = '#e2e2e2';
	themes.plain.buttonStroke        = '#e2e2e2';
	themes.plain.modalBackground     = '#f2f2f2';
	themes.zen                       = {};
	themes.zen.background            = '#000000';
	themes.zen.fieldset              = '#666666';
	themes.zen.touchTarget           = '#222222';
	themes.zen.touchTargetOver       = '#444444';
	themes.zen.titleColor            = '#FFFFFF';
	themes.zen.buttonTextColor       = '#999999';
	themes.zen.buttonTextColorOver   = '#FFFFFF';
	themes.zen.buttonStroke          = '';
	themes.zen.modalBackground       = '#000000';

	return themes;

}());

Pickl.prototype.themeLoad = function(){

	var style = this.themes[this.theme];

	// remove if present
	$(".picklTheme").remove();

	// now create it
	var css   = '';
	var theme = $('<style>');
		theme.attr('type','text/css');
		theme.attr('class','picklTheme');

		// base
		css += '@font-face {';
		css += 'font-family: \'VarelaRound\';';
		css += 'font-style: normal;'
		css += 'font-weight: 400;';
		css += 'src: local(\'VarelaRound\'), local(\'VarelaRound-Regular\'), url(fonts/Varela_Round/VarelaRound-Regular.woff) format(\'woff\');';
		css += '}';
		css += '.pickl { font-family:\'VarelaRound\'; font-size: 1rem; }';
		css += '.pickl .title { text-transform: uppercase; font-size: 1.5rem; }';
		css += '.pickl .title.options { font-size: .7rem; opacity: 0.5; }';
		css += '.pickl .hide { display: none; }';
		css += '.pickl text { alignment-baseline:central; text-anchor:middle; pointer-events:none; }';
		css += '.pickl .button { cursor: pointer; font-size: 0.85rem; }';
		css += '.pickl .button.close { text-transform: uppercase; }';
		css += '.pickl .button.arrow .touchTarget { stroke:none; }';
		css += '.pickl .field { font-size: 0.85rem; }';
		css += '.pickl .field .title { font-size: .7rem; opacity: 0.5; text-anchor: end; }';
		css += '.pickl .field .value { text-anchor:start; }';
		css += '.pickl .field .check { font-family:\'FontAwesome\'; font-size: 1.25rem; text-anchor:middle; opacity: .2; cursor: pointer; }';
		css += '.pickl .scroll { font-family:\'FontAwesome\'; font-size: 1.25rem; text-anchor:middle; opacity: .8; cursor: pointer; }';
		css += '.pickl .scroll .value { text-anchor:middle; }';
		css += '.pickl .field .check.selected, .pickl .field:hover .check, .pickl .scroll:hover { opacity: 1; }';

		// overrides
		css += '.pickl .background { fill: '+style.background+'; } ';
		css += '.pickl .fieldset { fill: '+style.fieldset+'; } ';
		css += '.pickl .title { fill: '+style.titleColor+';} ';
		css += '.pickl .field text, .close text { fill:'+style.buttonTextColor+'} ';
		css += '.pickl .button > .touchTarget, .pickl .field .touchTarget { fill: '+style.touchTarget+'; } ';
		css += '.pickl .button > .touchTarget { stroke: '+style.buttonStroke+'; } ';
		css += '.pickl .button:hover .touchTarget { fill: '+style.touchTargetOver+'; cursor:pointer; } ';
		css += '.pickl .button:hover text { fill: '+style.buttonTextColorOver+'; } ';
		css += '.pickl .button > .arrow > .touchTarget { fill: '+style.touchTarget+' } ';
		
	theme.append(css);
	$('head').append(theme);

	return theme;

};

;var Tabulous = function(options){

	// DEFAULT OPTIONS

	    var defaults       = {};
	    defaults.root      = 'C';
	    defaults.type      = '';
	    defaults.tuning    = ['e2','a2','d3','g3','b3','e4'];
	    defaults.frets     = 24;
	    defaults.span      = 5;
	    defaults.algorithm = 'KORDFU';

    // SETTINGS
    
    	this.settings = _.extend({}, defaults, options);

    // INIT

    	this.setUp();

};;Tabulous.prototype.getTuning = function(){

	var getNote = function(note){ return teoria.note(note); };
	var tuning  = _.map(this.settings.tuning, getNote);

	return tuning;

};

Tabulous.prototype.getBoard = function(){

	var strings = this.tuning;
	var board   = [];

	_.times(this.settings.frets, function(fret){
		board[fret] = [];
		_.each(strings, function(string, s){ 
			var note = teoria.note.fromKey(string.key() + fret);
			board[fret][s] = note;
		});
	});

	return board;

};

Tabulous.prototype.getChord = function(){

	var chord = teoria.chord(this.settings.root+this.settings.type);
	return chord;

};

Tabulous.prototype.getNotes = function(chord){

	// var notes = _.map(this.chord.notes(), function(note){ return note; });
	var notes = this.chord.notes();
	return notes;

};

Tabulous.prototype.getVoicings = function(){

	var population = this.calcAllPossibleVoicings();
	var nodups     = this.filterDupVoicings(population);
	var data       = this.assignData(nodups);
	var labels     = this.assignDataLabels(data);
	var playable   = this.filterPlayableChords(labels);
	var validate   = this.filterChordType(playable);

	return validate;

};

;Tabulous.prototype.setUp = function(){

    this.tuning    = this.getTuning();
    this.board     = this.getBoard();
    this.chord     = this.getChord();
    this.notes     = this.getNotes();
    this.voicings  = this.getVoicings();

};

Tabulous.prototype.set = function(param, value){

	this.settings[param] = value;
	this.setUp();

};

Tabulous.prototype.setNoteLabels = function(voicings){

    var that        = this;
    var chordLength = this.notes.length;
    var root        = that.settings.root.toLowerCase();

    // _.each(voicings, function(voicing){
    //  _.each(voicing.data, function(note){

    //      if(null !== note){

    //          var curr_note = note.toString(true);
    //          var enharmonics = _.map(note.enharmonics(), function(enharmonic){ return enharmonic.toString(true); });
    //          if(root === curr_note || _.contains(enharmonics, root)){ foundRoot = true; }
    //          if(!foundRoot){ 
    //              note.inverted = true; 
    //          } else {
    //              note.inverted = false;
    //          }

    //      }
            

    //  });
    // });

    return voicings;

};;Tabulous.prototype.printBoard = function(){

	var div = $("<pre>");

	// body print
	$("body").append(div);
	div.append("<h2>Board</h2>");

	_.each(this.board, function(string, s){
		_.each(string, function(fret, f){
			var enHarmCount = string[f].enharmonics().length;
			if(enHarmCount > 0){
				if(enHarmCount > 1){
					var enharm = '/' + string[f].enharmonics()[0].toString() + '/' + string[f].enharmonics()[1].toString();
				} else {
					var enharm = '/' + string[f].enharmonics()[0].toString() + '/';
				}
			} else {
				var enharm = '';
			}
			div.append(string[f].toString() + enharm + '	');
		});
		div.append("<br/>");
	});

	// console
	_.each(this.board, function(string, s){
		_.each(string, function(fret, f){

			var enharm = string[f].enharmonics().length ? string[f].enharmonics().toString() : 'x';

			console.log(
				"string-" + s, 
				"fret-" + f, 
				"note-" + string[f].toString(), 
				"enharm-" + enharm,
				"key-" + string[f].key(), 
				"freq-" + string[f].fq());
		});
	});
	
	return null;

};

Tabulous.prototype.printBoardChordNotes = function(){

	var div        = $("<table border=1>");
	var chordNotes = _.map(this.notes, function(note){ return note.name() + note.accidental(); });

	// body print
	$("body").append(div);
	div.append("<h2>Tab</h2>");
	_.each(this.board, function(string, s){
		var tr = $("<tr>");
		div.append(tr);
		tr.append('<td>' + s + '</td>');
		_.each(string, function(fret, f){

			var note          = string[f];
			var enharmName    = '';
			var enharm1       = '';
			var enharm2       = '';

			if(note.enharmonics().length){
				enharmName += note.enharmonics()[0].toString(true);
				enharm1 = note.enharmonics()[0].toString(true);
				if(note.enharmonics().length === 2){
					enharmName += '/' + note.enharmonics()[1].toString(true);
					enharm2 = note.enharmonics()[1].toString(true);
				}
			}
			
			var noteName      = note.name() + note.accidental();
			var isChordNote   = _.contains(chordNotes, noteName) || _.contains(chordNotes, enharm1) || _.contains(chordNotes, enharm2);
			var notation = true === isChordNote ? noteName + '/' + enharmName : '*';
			tr.append('<td>' + notation + '</td>');
		});
	});

};

Tabulous.prototype.printVoicings = function(voicings) {

	var voicings = voicings || this.voicings;

	console.log("chord=", this.chord);
	console.log("tuning=", this.tuning);
	console.log("notes=", this.notes);

	_.each(voicings, function(voicing){
		// console.log(voicing.voicing.toString());
		_.each(voicing.data,function(note, i){
			// console.log(i, voicing.voicing.toString(), note.isActive, note);
		});
		console.log(voicing.voicing, voicing);
		// console.log('----------------------------');
	});

};

;// cartesian combination
Tabulous.prototype.calcAllPossibleCombinations = function(args){

	var combinations = _.reduce(args, function(a, b) {
	    return _.flatten(_.map(a, function(x) {
	        return _.map(b, function(y) {
	            return x + '|' + y;
	        });
	    }), false);
	});

	var format = _.map(combinations, function(voicing){
		return _.map(voicing.split('|'), function(voice){
			return isNaN(voice) ? voice : parseInt(voice);
		});
	});

	// console.log(combinations, format);
	return format;

};

Tabulous.prototype.calcAllPossibleVoicings = function(startingFret, voicings){

	var voicings     = voicings || [];
	var startingFret = startingFret || 0;
	var range        = _.range(startingFret, startingFret + this.settings.span);
	var chordNotes   = _.map(this.notes, function(note){ return note.name() + note.accidental(); });
	var strings      = this.tuning;

	// loop strings
	var positions 	 = [];
	_.each(strings, function(string){
		var frets = [];
		_.each(range, function(fret){
			var note 	      = teoria.note.fromKey(string.key() + fret);
			var enharmName1	  = note.enharmonics().length ? note.enharmonics()[0].toString(true) : '';
			var enharmName2	  = note.enharmonics().length > 1 ? note.enharmonics()[1].toString(true) : '';
			var noteName      = note.toString(true);
			var isChordNote   = _.contains(chordNotes, noteName) || _.contains(chordNotes, enharmName1) || _.contains(chordNotes, enharmName2);
			if(isChordNote){
				frets.push(fret);
			}
		});
		positions.push(frets);
	});

	// remove empty notes, replace with 'x'
	_.each(positions, function(position){ if(position.length === 0) position.push('X'); });
	var combinations = this.calcAllPossibleCombinations(positions);
	var startFret    = startingFret + 1; // if we just passed the 12th fret, reset algo starting fret
	var cont         = (startingFret + this.settings.span) < this.settings.frets; // continue if we have more frets to walk

	// tally up
	_.each(combinations, function(combination){
		voicings.push(combination);
	});

	return true === cont ? this.calcAllPossibleVoicings(startFret, voicings) : voicings;


};;Tabulous.prototype.filterPlayableChords = function(population){

	var filter = [];

	// loop all voicings
	_.each(population, function(p, i){

		var voicing               = p.voicing;
		var fingersUsed           = 0;
		var fretsCounted          = [];
		var hasOpenOrMutedStrings = _.contains(voicing, 0);
		var voicingsFretted 	  = _.filter(voicing,function(v,vi){ return v > 0 && p.data[vi].active });
		var firstFret             = _.sortBy(voicingsFretted)[0];
		var voicingSorted         = voicing.slice(0);

		// loop frets
		_.each(voicingSorted, function(fret, j){
			
			var isFretted 				= !_.contains([0,-1],fret);
			var numStringsFretted     	= _.filter(voicingsFretted, function(v){ return v === fret }).length;
			var fretCounted 			= _.contains(fretsCounted, fret);

			// finger counting logic
			if(!fretCounted){
				if(!hasOpenOrMutedStrings && firstFret === fret){ fingersUsed += 1; }
				if(hasOpenOrMutedStrings && firstFret === fret){ fingersUsed += numStringsFretted; }
				if(firstFret !== fret){ fingersUsed += numStringsFretted }
			}
			
			fretsCounted.push(fret);


		});

		if(fingersUsed <= 4) { 
			filter.push(p);
			// console.log('playable', voicing, fingersUsed, p, p.data.toString());
		} else {
			// console.log('unplayable', voicing, fingersUsed, p, p.data.toString());
		}

	});

	return filter;

};

Tabulous.prototype.filterChordType = function(voicings){

	var chordNotes       = _.map(this.notes, function(note){ return note.toString(true) });
	var chordNotesChroma = _.map(this.notes, function(note){ return note.chroma() });

	var validate = function(voicing){

		var notesChroma = function(note){ return note.teoria.chroma(); };
		var notesChroma = _.map(voicing.data, notesChroma);
		var notes       = function(note){ return note.teoria.toString(true); };
		var notes       = _.map(voicing.data, notes);
		var diff        = _.difference(chordNotesChroma, notesChroma);
		var isValid     = diff.length === 0;

		// console.log(isValid, diff.length, voicing.voicing, chordNotes, notes);

		return isValid

	};

	var validChordTypes = _.filter(voicings, validate);

	return validChordTypes;


};

Tabulous.prototype.filterDupVoicings = function(voicings){
	
	var uniqs = [];
	var uniq_voicings = [];

	_.each(voicings, function(voicing){
		var found = void 0 === _.find(uniqs,voicing);
		if(found){ 
			uniqs.push(voicing);
			uniq_voicings.push(voicing);
		}
	});

	return uniq_voicings;

};;Tabulous.prototype.assignData = function(voicings){

    var board = this.board;
    var data  = [];
    var root  = this.settings.root.toLowerCase();

    // loop data
    _.each(voicings, function(voicing){
        var tab = {};
        tab.voicing = voicing;
        tab.data = _.map(voicing, function(fret, string){
            if(fret === 'X'){
                var o = null;
            } else {
                var o = board[fret][string];
            }
            return o;
        });
        data.push(tab);
    });

    return data;
    
};


Tabulous.prototype.assignDataLabels = function(voicings){

    var that        = this;
    var chordLength = this.notes.length;
    var stringCount = this.tuning.length;
    var root        = that.settings.root.toLowerCase();

    // loop voicings
    _.each(voicings, function(voicing){

        // get which string index has the first occurance of the root
        var firstRoot = _.findIndex(voicing.data, function(note){ return note.toString(true) === root; });

        // assign active state
        voicing.data = _.map(voicing.data, function(note, i){

            var isActive = i >= firstRoot || i >= (stringCount-chordLength) ? true : false;
            var isRoot = root === note.toString(true) ? true : false;
            var obj = { teoria:note, isRoot:isRoot, isActive:isActive };

            return obj;

        });


    });

    return voicings;

};;var PLUKIT = {
    guitar: {
        acoustic: {
            nylon: {
                mp3: 'gtr_aco_nylon.mp3'
            },
            steel: {
                mp3: 'gtr_aco_steel.mp3'
            }
        },
        electric: {
            clean: {
                mp3: 'gtr_elec_clean.mp3'
            },
            dist: {
                mp3: 'gtr_elec_dist.mp3'
            }
        }
    }
};

var Plukit = function(options){

    // settings obj
    var defaults           = {};
    defaults.sampleFile    = PLUKIT.guitar.acoustic.steel.mp3;
    defaults.samplePath    = 'modules/plukit/';
    defaults.sampleLength  = 2000;
    defaults.device        = "undefined" === typeof device ? 'browser' : device.platform;

    // setup options
    this.settings      = _.extend(this, defaults, options);
    this.spriteOffsets = this.calcSpriteOffsets();
    this.player        = this.getPlayer();

};

Plukit.prototype.getPlayer = function() {

    // get player object
    switch(this.settings.device) {
        case 'browser':
            return this.getHowler();
            break;
    }

};

Plukit.prototype.getHowler = function(){

    var howler = new Howl({
      urls: [this.settings.samplePath + this.settings.sampleFile],
      sprite: this.settings.spriteOffsets
    });

    return howler;

};

Plukit.prototype.calcSpriteOffsets = function(){

    var that          = this;
    var keys          = ['c','c#/db','d','d#/eb','e','f','f#/gb','g','g#/ab','a','a#/bb','b'];
    var offset        = 0;
    var sprite        = {};
    var octaves       = 5;
    
    _.times(octaves,function(n){

        var octave = n+1;
        _.each(keys, function(key){

            var key_notes = key.split('/');
            sprite[key_notes[0] + octave] = [offset, that.settings.sampleLength];
            if(key_notes.length > 1){
                sprite[key_notes[1] + octave] = [offset, that.settings.sampleLength];
            } 
            
            offset += that.settings.sampleLength;

        });

    });

    return sprite;

};

Plukit.prototype.play = function (note) {
    
    switch(this.settings.device) {

        case 'browser':
            this.player.play(note);
            break;

        case 'Android':

            var onSuccess = function(){};
            var onError   = function(){};
            var file      = this.settings.samplePath + this.settings.sampleFile;
            var player    = new Media(file, onSuccess, onError);
            var offset    = this.spriteOffsets[note][0];
            var stop      = function(){ player.pause(); player.release(); };

            player.seekTo(offset);
            player.play();
            
            window.setTimeout(stop, 1000);
            break;

    }

};
